// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------
// --- AUTH MODELS ---
// -------------------

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  role         UserRole @default(Invitado)
  passwordHash String
  lastLogin    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roleId       Int
  role_relation Role    @relation("RoleToUser", fields: [roleId], references: [id])
  orders       Order[]

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  permissions String[]
  users       User[]   @relation("RoleToUser")

  @@map("roles")
}

enum UserRole {
  Admin
  Ventas
  Produccion
  Invitado
  System
}

// -------------------
// --- CORE MODELS ---
// -------------------

model Client {
  id                  Int      @id @default(autoincrement())
  name                String
  cuit                String   @unique
  address             String
  phone               String
  email               String
  discountLevel       Int      @default(0) // e.g., 0 for none, 1 for 5%, 2 for 10%
  canEditPrices       Boolean  @default(false)
  commissionFee       Float    @default(0)
  sellsOnInstallments Boolean  @default(false)
  orders              Order[]
  orderDetails        OrderDetail[]
  claims              Claim[]

  @@map("clients")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  application String
  colors      String[]
  status      String   @default("active") // active, inactive
  details     OrderDetail[]

  @@map("products")
}


model Order {
  id         Int           @id @default(autoincrement())
  client     Client        @relation(fields: [clientId], references: [id])
  clientId   Int
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  status     String
  totalAmount Decimal      @db.Decimal(10, 2)
  orderDate  DateTime      @default(now())
  isPartial  Boolean       @default(false)
  details    OrderDetail[]
  claims     Claim[]

  @@map("orders")
}

model OrderDetail {
  id                 Int      @id @default(autoincrement())
  order              Order?    @relation(fields: [orderId], references: [id])
  orderId            Int?
  client             Client   @relation(fields: [clientId], references: [id])
  clientId           Int
  product            Product  @relation(fields: [productId], references: [id])
  productId          Int
  quantity           Int
  unitPrice          Decimal  @db.Decimal(10, 2)
  totalPrice         Decimal  @db.Decimal(10, 2)
  status             String // pending, produced, dispatched, delivered, claimed, etc.
  isProduced         Boolean  @default(false)
  productionDate     DateTime?
  productionDoneDate DateTime?
  dispatchReadyDate  DateTime?
  dispatchedDate     DateTime?
  deliveryNoteDate   DateTime?

  // FKs for other processes, can be nullable
  cartId             String?
  paymentId          String?
  deliveryNoteId     String?
  batch              ProductionBatch? @relation(fields: [batchId], references: [id])
  batchId            Int?
  claim              Claim?

  @@map("order_details")
}

model ProductionBatch {
  id             Int           @id @default(autoincrement())
  batchNumber    String        @unique
  productionDate DateTime
  plannedDate    DateTime
  status         String        // Planned, In Progress, Completed
  items          OrderDetail[]

  @@map("production_batches")
}

model Claim {
  id            Int         @id @default(autoincrement())
  orderDetail   OrderDetail @relation(fields: [orderDetailId], references: [id])
  orderDetailId Int         @unique
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       Int
  client        Client      @relation(fields: [clientId], references: [id])
  clientId      Int
  reason        String
  status        String      // open, resolved, closed
  resolution    String?
  createdAt     DateTime    @default(now())

  @@map("claims")
}