// Este es tu esquema de Prisma.
// Aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================
//                         MODELOS
// ==============================================================

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  name          String
  passwordHash  String
  role          UserRole
  lastLogin     DateTime?
  orders        Order[]
  roleRelation  Role        @relation("RoleToUser", fields: [roleId], references: [id])
  roleId        Int

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  permissions String[]
  users       User[]   @relation("RoleToUser")

  @@map("roles")
}

model Client {
  id                  Int           @id @default(autoincrement())
  name                String
  cuit                String        @unique
  address             String
  phone               String
  email               String        @unique
  discountLevel       Int           @default(1)
  canEditPrices       Boolean       @default(false)
  commissionFee       Float         @default(0)
  sellsOnInstallments Boolean       @default(false)
  orders              Order[]
  orderDetails        OrderDetail[]
  claims              Claim[]

  @@map("clients")
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  type        String
  application String
  colors      String[]
  status      String        @default("active")
  orderDetails OrderDetail[]

  @@map("products")
}

model Order {
  id          Int           @id @default(autoincrement())
  client      Client        @relation(fields: [clientId], references: [id])
  clientId    Int
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  status      String
  totalAmount Decimal       @db.Decimal(10, 2)
  orderDate   DateTime      @default(now())
  isPartial   Boolean       @default(false)
  details     OrderDetail[]
  claims      Claim[]

  @@map("orders")
}

model OrderDetail {
  id                 Int              @id @default(autoincrement())
  order              Order            @relation(fields: [orderId], references: [id])
  orderId            Int
  client             Client           @relation(fields: [clientId], references: [id])
  clientId           Int
  product            Product          @relation(fields: [productId], references: [id])
  productId          Int
  quantity           Int
  unitPrice          Decimal          @db.Decimal(10, 2)
  totalPrice         Decimal          @db.Decimal(10, 2)
  status             String
  isProduced         Boolean          @default(false)
  // Campos de fechas para seguimiento
  productionDate     DateTime?
  productionDoneDate DateTime?
  dispatchReadyDate  DateTime?
  dispatchedDate     DateTime?
  deliveryNoteDate   DateTime?
  // IDs opcionales para relaciones
  cartId             String?
  paymentId          String?
  deliveryNoteId     String?
  batchId            Int?
  productionBatch    ProductionBatch? @relation(fields: [batchId], references: [id])
  Claim              Claim[]

  @@map("order_details")
}

model ProductionBatch {
  id             Int           @id @default(autoincrement())
  batchNumber    String        @unique
  productionDate DateTime?
  plannedDate    DateTime
  status         String
  items          OrderDetail[]

  @@map("production_batches")
}

model Claim {
  id            Int         @id @default(autoincrement())
  orderDetail   OrderDetail @relation(fields: [orderDetailId], references: [id])
  orderDetailId Int         @unique
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       Int
  client        Client      @relation(fields: [clientId], references: [id])
  clientId      Int
  reason        String
  status        String
  resolution    String?
  createdAt     DateTime    @default(now())

  @@map("claims")
}


// ==============================================================
//                           ENUMS
// ==============================================================

enum UserRole {
  Admin
  Ventas
  Produccion
  Invitado
  System
}
